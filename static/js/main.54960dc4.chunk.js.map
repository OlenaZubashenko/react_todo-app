{"version":3,"sources":["components/Header/Header.js","components/TodoListItem/TodoListItem.js","common/constants.js","components/TodoList/TodoList.js","components/Filter/Filter.js","App.js","index.js"],"names":["Header","state","title","handleInputChange","target","setState","value","handleReset","handleSubmit","event","preventDefault","addTodoItem","props","trim","id","Date","completed","this","toogleSelection","isTodosExist","selectedAll","className","onSubmit","type","onChange","checked","htmlFor","hidden","placeholder","React","Component","TodoListItem","item","todoListItem","deleteTodo","classNames","onClick","onClickCompleted","FILTERS","all","active","TodoList","todos","filter","todo","done","todoList","map","key","Filter","counter","buttons","name","label","onFilterChange","removeCompleted","count","App","length","find","t","el","newTodo","index","findIndex","newArray","slice","toggleSelectAll","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54960dc4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state = {\n    title: '',\n\n  }\n\n  handleInputChange = ({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  }\n\n  handleReset = () => {\n    this.setState({\n      title: '',\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { addTodoItem } = this.props;\n    const { title } = this.state;\n\n    if (title.trim()) {\n      const newTodo = {\n        title: title.trim(),\n        id: +(new Date()),\n        completed: false,\n      };\n      addTodoItem(newTodo);\n    }\n    this.handleReset();\n  }\n\n  render() {\n    const { title } = this.state;\n    const {toogleSelection, isTodosExist, selectedAll} = this.props;\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={toogleSelection}\n            checked={selectedAll}\n          />\n          <label htmlFor=\"toggle-all\"\n           hidden={!isTodosExist}\n          >Mark all as complete</label>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={this.handleInputChange}\n          />\n\n        </form>\n      </header>\n    )\n  };\n};\n\nexport default Header;\n\nHeader.propTypes = {\n  addTodoItem: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class TodoListItem extends React.Component {\n  state = {\n    item: this.props.todoListItem\n  };\n\n  render() {\n    const item = this.state.item;\n    const { title, id } = item;\n    const deleteTodo = this.props.deleteTodo;\n\n    let classNames = '';\n    if (item.completed) {\n      classNames += 'completed'\n    };\n\n    return (\n      <>\n        <li className={classNames}>\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              checked={item.completed}\n              id={id}\n              onClick={() => this.props.onClickCompleted(item)}\n            />\n            <label htmlFor={id}>{title}</label>\n            <button type=\"button\" className=\"destroy\"\n              onClick={() => deleteTodo(id)}\n            />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n      </>\n    )\n  }\n}\n\nTodoListItem.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  };\n\n\n","const FILTERS = {\n  all: 'all',\n  completed: 'completed',\n  active: 'active',\n};\n\nexport default FILTERS;\n","import React from 'react';\nimport TodoListItem from '../TodoListItem/TodoListItem';\nimport FILTERS from '../../common/constants'\n\nexport default class TodoList extends React.Component {\n  state = {\n    todos: this.props.todos\n  }\n\n  filter(filter) {\n    switch (filter) {\n      case FILTERS.active:\n        return this.props.todos.filter(todo => !todo.completed);\n      case FILTERS.done:\n        return this.props.todos.filter(todo => todo.completed);\n      default:\n        return this.props.todos;\n    }\n  }\n\n\n  render() {\n    const { filter } = this.props;\n\n    let todoList = this.filter(filter).map(todo => {\n      return <TodoListItem\n        key={('todo_item_' + todo.id)}\n        todoListItem={todo}\n        deleteTodo={this.props.deleteTodo}\n        onClickCompleted={this.props.onClickCompleted}\n\n      />\n    })\n    return (\n      <section className=\"main\">\n        <ul className=\"todo-list\">\n          {todoList}\n        </ul>\n      </section>\n    )\n  }\n}\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FILTERS from '../../common/constants'\n\nexport default class Filter extends React.Component {\n  state = {\n     counter: this.counter,\n  }\n\n  buttons = [\n    { name: FILTERS.all , label: \"All\" },\n    { name: FILTERS.done, label: \"Done\" },\n    { name: FILTERS.active, label: \"Active\" },\n  ]\n\n  render() {\n    const { filter, onFilterChange, removeCompleted,isTodosExist } = this.props;\n    const buttons = this.buttons.map(({ name, label }) => {\n      const isActive = filter === name;\n     const classNames = isActive ? \"selected\" : '';\n      return (\n        <li key={name}  onClick={() => onFilterChange(name)}>\n          <a className={classNames}>\n            {label}\n          </a>\n        </li>\n      )\n    })\n    return (\n      <footer className=\"footer\"\n      hidden={!isTodosExist}>\n        <span className=\"todo-count\">\n          {` to do: `}\n          {this.props.counter}\n          {`, done: `}\n          {this.props.count}\n        </span>\n        <ul className=\"filters\">\n          {buttons}\n        </ul>\n        <button type=\"button\" className=\"clear-completed\"\n          onClick={removeCompleted}\n        >\n          Clear completed\n              </button>\n      </footer>\n    )\n  }\n}\n\nFilter.propTypes = {\n removeCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport TodoList from './components/TodoList/TodoList';\nimport Filter from './components/Filter/Filter';\nimport FILTERS from './common/constants'\n\nconst todos = [];\n\nexport default class App extends React.Component {\n  state = {\n    todos: [...todos],\n    counter: 0,\n    count: 0,\n    filter: FILTERS.all,\n    selectedAll: todos.length>0 && !todos.find(t => !t.completed),\n  }\n  deleteTodo = (id) => {\n    this.setState({\n      todos: this.state.todos.filter((el) => el.id !== id)\n    });\n  }\n\n  addTodoItem = (newTodo) => {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  };\n\n  onClickCompleted = (todo) => {\n    todo.completed = !todo.completed;\n    const index = this.state.todos.findIndex((el) => el.id === todo.id);\n\n    const newArray = [\n      ...this.state.todos.slice(0, index),\n      todo,\n      ...this.state.todos.slice(index + 1)\n    ];\n\n    this.setState({\n      todos: newArray,\n      selectedAll: !newArray.find(t => !t.completed),\n    });\n  };\n\n  onFilterChange = (filter) => {\n    this.setState({\n      filter: filter,\n    });\n  };\n\n  toggleSelectAll = () => {\n    this.state.selectedAll = !this.state.selectedAll;\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        todo.completed = this.state.selectedAll;\n        return todo;\n      })\n    });\n  };\n\n  removeCompleted = () => {\n    this.setState({\n      todos: this.state.todos.filter(todo => !todo.completed),\n    });\n  }\n\n  render() {\n    const { todos, filter } = this.state;\n\n    const counter = todos.filter(todo => !todo.completed).length;\n    const count = todos.filter(todo => todo.completed).length;\n    const isTodosExist = todos.length > 0;\n    return (\n      <section className=\"todoapp\">\n        <Header\n          isTodosExist={isTodosExist}\n          addTodoItem={this.addTodoItem}\n          toogleSelection={this.toggleSelectAll}\n          selectedAll={this.state.selectedAll}\n        />\n        <TodoList\n          todos={todos}\n          filter={filter}\n          deleteTodo={this.deleteTodo}\n          onClickCompleted={this.onClickCompleted}\n          removeCompleted={this.removeCompleted}\n        />\n        <Filter\n          todos={todos}\n          isTodosExist={isTodosExist}\n          counter={counter}\n          count={count}\n          filter={filter}\n          onFilterChange={this.onFilterChange}\n          removeCompleted={this.removeCompleted}\n        />\n      </section>\n    )\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}