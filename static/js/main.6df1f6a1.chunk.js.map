{"version":3,"sources":["components/Header/Header.js","components/TodoListItem/TodoListItem.js","components/TodoList/TodoList.js","components/Filter/Filter.js","App.js","index.js"],"names":["Header","state","handleInputChange","event","setState","title","target","value","handleReset","handleSubmit","preventDefault","addTodoItem","props","trim","id","Date","comleted","this","className","onSubmit","type","placeholder","onChange","React","Component","TodoListItem","item","todoListItem","deleteTodo","classNames","onClick","onClickCompleted","htmlFor","TodoList","todos","filter","todo","todoList","map","key","Filter","buttons","name","label","onFilterChange","e","console","log","removeCompleted","counter","count","App","selectAll","index","findIndex","el","newArray","slice","newTodo","elt","toggleSelectAll","completed","length","deleteCompleted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6df1f6a1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  //state = this.state;\n  state = {\n    // title: '',\n    // id: 0,\n  }\n\n  handleInputChange = (event) => {\n    this.setState({\n      title: event.target.value,\n    })\n  };\n\n  handleInputChange = ({ target }) => {\n    this.setState({\n      title: target.value,\n    });\n  }\n\n  handleReset = () => {\n    this.setState({\n      title: '',\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { addTodoItem } = this.props;\n    const { title } = this.state;\n\n    if (title.trim()) {\n      const newTodo = {\n        title: title.trim(),\n        id: +(new Date()),\n        comleted: false,\n      };\n      addTodoItem(newTodo);\n    }\n    this.handleReset();\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={title}\n            onChange={this.handleInputChange}\n          />\n        </form>\n      </header>\n    )\n  };\n};\n\nexport default Header;\n\nHeader.propTypes = {\n  addTodoItem: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.object.isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class TodoListItem extends React.Component {\n  state = {\n    item: this.props.todoListItem\n  };\n\n  render() {\n    const item = this.state.item;\n    const { title, id } = item;\n    const deleteTodo = this.props.deleteTodo;\n    //const { completed } = this.state;\n\n    let classNames = '';\n    if (item.comleted) {\n      classNames += 'completed'\n    };\n\n    return (\n      <>\n        <li className={classNames}>\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={id}\n              onClick={() => this.props.onClickCompleted(item)}\n            />\n            <label htmlFor={id}>{title}</label>\n            <button type=\"button\" className=\"destroy\"\n              onClick={() => deleteTodo(id)}\n            />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n      </>\n    )\n  }\n}\n\nTodoListItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  };\n\n\n","import React from 'react';\nimport TodoListItem from '../TodoListItem/TodoListItem';\nimport PropTypes from 'prop-types';\n\nexport default class TodoList extends React.Component {\n  state = {\n    todos: this.props.todos\n  }\n\n  filter(filter) {\n    switch (filter) {\n      case 'active':\n       return this.props.todos.filter(todo => !todo.comleted);\n       // console.log('2')\n      case 'done':\n         return this.props.todos.filter(todo => todo.comleted);\n       // console.log('3')\n      default:\n        return this.props.todos;\n    }\n  }\n  render() {\n    const {filter} = this.props;\n\n    let todoList = this.filter(filter).map(todo => {\n      return <TodoListItem\n        key={('todo_item_' + todo.id)}\n        todoListItem={todo}\n        deleteTodo={this.props.deleteTodo}\n        onClickCompleted={this.props.onClickCompleted}\n\n        />\n    })\n    return (\n      <section className=\"main\">\n        <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n       // onChange={this.props.toggleSelectAll}\n         />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        <ul className=\"todo-list\">\n          {todoList}\n\n        </ul>\n      </section>\n    )\n  }\n}\n\n\nTodoList.propTypes = {\n  filter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Filter extends React.Component {\n  state = {\n    // counter: this.counter,\n  }\n\n  buttons = [\n    { name: \"all\", label: \"All\" },\n    { name: \"done\", label: \"Done\" },\n    { name: \"active\", label: \"Active\" },\n  ]\n  onFilterChange = (e) =>{\n    e.preventDefault();\n    console.log('По ссылке кликнули.');\n  }\n\n  render() {\n    const { filter, onFilterChange, removeCompleted } = this.props;\n    const buttons = this.buttons.map(({ name, label }) => {\n      const isActive = filter === name;\n     const classNames = isActive ? \"selected\" : '';\n      return (\n        <li key={name}  onClick={() => onFilterChange(name)}>\n          <a className={classNames}>\n            {label}\n          </a>\n        </li>\n      )\n    })\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {` to do: `}\n          {this.props.counter}\n          {`, done: `}\n          {this.props.count}\n        </span>\n        <ul className=\"filters\">\n          {buttons}\n        </ul>\n        <button type=\"button\" className=\"clear-completed\"\n          onClick={removeCompleted}\n        >\n          Clear completed\n              </button>\n      </footer>\n    )\n  }\n}\n\nFilter.propTypes = {\n removeCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport TodoList from './components/TodoList/TodoList';\nimport Filter from './components/Filter/Filter';\n//import todos from './api/todos';\n\nconst todos = [];\n\nexport default class App extends React.Component {\n  state = {\n    todos: [...todos],\n    counter: 0,\n    count: 0,\n    filter: 'all',\n    selectAll: false,\n  }\n  deleteTodo = (id) => {\n    const index = this.state.todos.findIndex((el) => el.id === id);\n\n    const newArray = [\n      ...this.state.todos.slice(0, index),\n      ...this.state.todos.slice(index + 1)\n    ];\n    this.setState({\n      todos: newArray\n    });\n  }\n\n  addTodoItem = (newTodo) => {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  };\n\n  onClickCompleted = (elt) => {\n    elt.comleted = !elt.comleted;\n    const index = this.state.todos.findIndex((el) => el.id === elt.id);\n\n    const newArray = [\n      ...this.state.todos.slice(0, index),\n      elt,\n      ...this.state.todos.slice(index + 1)\n    ];\n    this.setState({\n      todos: newArray\n    });\n  };\n\n  onFilterChange = (filter) => {\n    this.setState({\n      filter: filter,\n    });\n  };\n\n  // removeCompleted = () => {\n  //   this.setState(prevState => ({\n  //     todos: [...prevState.todos].filter(todo => !todo.completed),\n  //   }));\n  // };\n\n  toggleSelectAll = () => {\n    this.setState({\n      todos: this.state.todos.map(todo => todo.completed),\n    })\n  };\n\n  removeCompleted = () => {\n    this.setState({\n      todos: this.state.todos.filter(todo => !todo.comleted),\n    });\n  }\n\n  render() {\n    const { todos, filter } = this.state;\n\n    const counter = todos.filter(todo => !todo.comleted).length;\n    const count = todos.filter(todo => todo.comleted).length;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          todos={todos}\n          addTodoItem={this.addTodoItem}\n        />\n        <TodoList\n          todos={todos}\n          filter={filter}\n          deleteTodo={this.deleteTodo}\n          onClickCompleted={this.onClickCompleted}\n          toggleSelectAll={this.toggleSelectAll}\n          deleteCompleted={this.deleteCompleted}\n        />\n        <Filter\n          todos={todos}\n          counter={counter}\n          count={count}\n          filter={filter}\n          onFilterChange={this.onFilterChange}\n          removeCompleted={this.removeCompleted}\n        />\n      </section>\n    )\n  }\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}